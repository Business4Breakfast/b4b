<?php
/**
 * Copyright (c) 2017, Gergely KrÃ¡lik <gergely@kralik.io>
 * All rights reserved.
 */

/**
 * Global helpers file with misc functions.
 */
if (! function_exists('app_name')) {
    /**
     * Helper to grab the application name.
     *
     * @return mixed
     */
    function app_name()
    {
        return config('app.name');
    }
}

if (! function_exists('app_url')) {
    /**
     * Helper to grab the application URL.
     *
     * @return mixed
     */
    function app_url()
    {
        return config('app.url');
    }
}

if (! function_exists('app_locale')) {
    /**
     * Helper to grab the application locale.
     *
     * @return mixed
     */
    function app_locale()
    {
        return config('app.locale');
    }
}

if (! function_exists('access')) {
    /**
     * Access (lol) the Access:: facade as a simple function.
     */
    function access()
    {
        return app('access');
    }
}

if (! function_exists('history')) {
    /**
     * Access the history facade anywhere.
     */
    function history()
    {
        return app('history');
    }
}

if (! function_exists('gravatar')) {
    /**
     * Access the gravatar helper.
     */
    function gravatar()
    {
        return app('gravatar');
    }
}

if (! function_exists('includeRouteFiles')) {

    /**
     * Loops through a folder and requires all PHP files
     * Searches sub-directories as well.
     *
     * @param $folder
     */
    function includeRouteFiles($folder)
    {
        try {
            $rdi = new recursiveDirectoryIterator($folder);
            $it = new recursiveIteratorIterator($rdi);

            while ($it->valid()) {
                if (! $it->isDot() && $it->isFile() && $it->isReadable() && $it->current()->getExtension() === 'php') {
                    require $it->key();
                }

                $it->next();
            }
        } catch (Exception $e) {
            echo $e->getMessage();
        }
    }
}

if (! function_exists('getRtlCss')) {

    /**
     * The path being passed is generated by Laravel Mix manifest file
     * The webpack plugin takes the css filenames and appends rtl before the .css extension
     * So we take the original and place that in and send back the path.
     *
     * @param $path
     *
     * @return string
     */
    function getRtlCss($path)
    {
        $path = explode('/', $path);
        $filename = end($path);
        array_pop($path);
        $filename = rtrim($filename, '.css');

        return implode('/', $path).'/'.$filename.'.rtl.css';
    }
}

if (! function_exists('homeRoute')) {

    /**
     * Return the route to the "home" page depending on authentication/authorization status.
     *
     * @return string
     */
    function homeRoute()
    {
       if (auth()->check()) {
            return 'backend.dashboard';
        }

        return 'frontend.auth.login';
    }
}

if (!function_exists('localityLists')) {

    function localityLists($type)
    {
        $type = 'App\Models\Locality\\'.ucfirst($type);
        if (class_exists($type) === true) {
            $type = new $type;

            return $type->all()->mapWithKeys(
                function ($item) {
                    return [$item['id'] => $item['name']];
                }
            )->toArray();
        }

        return null;
    }
}

if (!function_exists('booleanLabel')) {

    function booleanLabel($value)
    {
        if (boolval($value) === true) {
            return '<span class="badge badge-success">'.trans(
                    'buttons.general.yes'
                ).'</span>';
        }

        return '<span class="badge badge-danger">'.trans(
                'buttons.general.no'
            ).'</span>';
    }
}


if (! function_exists('maskEmail')) {

    /**
     * Helper to masking email address.
     *
     * @return mixed
     */

    function maskEmail($email, $minLength = 3, $maxLength = 10, $mask = "***") {
        $atPos = strrpos($email, "@");
        $name = substr($email, 0, $atPos);
        $len = strlen($name);
        $domain = substr($email, $atPos);

        if (($len / 2) < $maxLength) $maxLength = ($len / 2);

        $shortenedEmail = (($len > $minLength) ? substr($name, 0, $maxLength) : "");
        return  "{$shortenedEmail}{$mask}{$domain}";
    }

}


if (! function_exists('formatMessage')) {

    /**
     * Format the parameters for the logger.
     *
     * @param  mixed  $message
     * @return mixed
     */
    function formatMessage($message)
    {
        if (is_array($message)) {
            return var_export($message, true);
        } elseif ($message instanceof Jsonable) {
            return $message->toJson();
        } elseif ($message instanceof Arrayable) {
            return var_export($message->toArray(), true);
        }

        return $message;
    }

}




if (! function_exists('maskPhone')) {

    /**
     * Helper to masking phone number
     *
     * @return mixed
     */
    function maskPhone($phone) {
        return substr($phone, 0, -4) . "****";
    }

}





if (! function_exists('getEventText')) {

    /**
     * Helper to get event text
     *
     * @return string
     */
    function getEventText($id) {

        $event_texts = DB::table('event_type_text')->where('id', intval($id))->value('description');

        return $event_texts;
    }

}
